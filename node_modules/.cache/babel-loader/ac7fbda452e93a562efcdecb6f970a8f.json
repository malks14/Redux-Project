{"ast":null,"code":"import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\"; //action creator thunk\n\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://redux-cartapp-default-rtdb.firebaseio.com/cart.json');\n    };\n\n    if (!response.ok) {\n      throw new Error('Could not fetch cart data!');\n    }\n\n    ;\n    const data = await response.json();\n    return data;\n\n    try {\n      const cartData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: cartData.items || [],\n        totalQuantity: cartData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error...',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch('https://redux-cartapp-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Send cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error...',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/guidogreco/Udemy/React/Redux/Advanced/01-starting-project/src/store/cart-actions.js"],"names":["uiActions","cartActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","cartData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,QAA4B,cAA5B,C,CACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,SAAO,MAAOC,QAAP,IAAoB;AACvB,UAAMC,SAAS,GAAG,YAAY;AAC1B,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6DAAD,CAA5B;AACH,KAFD;;AAIA,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd,YAAM,IAAIC,KAAJ,CAAW,4BAAX,CAAN;AACH;;AAAA;AAED,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAEA,WAAOD,IAAP;;AAEA,QAAI;AACA,YAAME,QAAQ,GAAI,MAAMP,SAAS,EAAjC;AACAD,MAAAA,QAAQ,CAACF,WAAW,CAACW,WAAZ,CAAwB;AAC7BC,QAAAA,KAAK,EAAEF,QAAQ,CAACE,KAAT,IAAkB,EADI;AAE7BC,QAAAA,aAAa,EAAEH,QAAQ,CAACG;AAFK,OAAxB,CAAD,CAAR;AAIH,KAND,CAME,OAAOC,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CACJH,SAAS,CAACgB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,UAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADI,CAAR;AAOH;AACJ,GA5BD;AAgCH,CAjCM;AAmCP,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAO,MAAOlB,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CACJH,SAAS,CAACgB,gBAAV,CAA2B;AACvBC,MAAAA,MAAM,EAAE,SADe;AAEvBC,MAAAA,KAAK,EAAE,YAFgB;AAGvBC,MAAAA,OAAO,EAAE;AAHc,KAA3B,CADI,CAAR;;AAQJ,UAAMG,WAAW,GAAG,YAAY;AAC5B,YAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,6DAAD,EAC5B;AACAiB,QAAAA,MAAM,EAAE,KADR;AAEAC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBb,UAAAA,KAAK,EAAEQ,IAAI,CAACR,KADK;AAEjBC,UAAAA,aAAa,EAAEO,IAAI,CAACP;AAFH,SAAf;AAFN,OAD4B,CAA5B;;AASJ,UAAI,CAACT,QAAQ,CAACE,EAAd,EAAkB;AACf,cAAM,IAAIC,KAAJ,CAAW,2BAAX,CAAN;AACF;AACA,KAbD;;AAeA,QAAI;AACA,YAAMc,WAAW,EAAjB;AAEAnB,MAAAA,QAAQ,CACJH,SAAS,CAACgB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,SADiB;AAEzBC,QAAAA,KAAK,EAAE,UAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADI,CAAR;AAQH,KAXD,CAWE,OAAOJ,KAAP,EAAc;AACZZ,MAAAA,QAAQ,CACJH,SAAS,CAACgB,gBAAV,CAA2B;AACzBC,QAAAA,MAAM,EAAE,OADiB;AAEzBC,QAAAA,KAAK,EAAE,UAFkB;AAGzBC,QAAAA,OAAO,EAAE;AAHgB,OAA3B,CADI,CAAR;AAOH;AACA,GA5CD;AA6CH,CA9CM","sourcesContent":["import { uiActions } from \"./ui-slice\";\nimport { cartActions } from \"./cart-slice\";\n//action creator thunk\n\nexport const fetchCartData = () => {\n    return async (dispatch) => {\n        const fetchData = async () => {\n            const response = await fetch('https://redux-cartapp-default-rtdb.firebaseio.com/cart.json');\n        };\n\n        if (!response.ok) {\n            throw new Error ('Could not fetch cart data!')\n        };\n\n        const data = await response.json();\n\n        return data;\n\n        try {\n            const cartData =  await fetchData();\n            dispatch(cartActions.replaceCart({\n                items: cartData.items || [],\n                totalQuantity: cartData.totalQuantity\n            }));\n        } catch (error) {\n            dispatch(\n                uiActions.showNotification({\n                  status: 'error',\n                  title: 'Error...',\n                  message: 'Sending cart data failed!',\n                })\n            );   \n        }\n    };\n\n    \n \n};\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            uiActions.showNotification({\n                status: 'pending',\n                title: 'Sending...',\n                message: 'Sending cart data!'\n            })\n        );\n        \n    const sendRequest = async () => {\n        const response = await fetch('https://redux-cartapp-default-rtdb.firebaseio.com/cart.json', \n        {\n        method: 'PUT',\n        body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity\n        })\n        });\n\n    if (!response.ok) {\n       throw new Error ('Sending cart data failed.')\n    }\n    };\n\n    try {  \n        await sendRequest();\n\n        dispatch(\n            uiActions.showNotification({\n              status: 'success',\n              title: 'Success!',\n              message: 'Send cart data successfully!'\n            })\n          );\n    \n    } catch (error) {\n        dispatch(\n            uiActions.showNotification({\n              status: 'error',\n              title: 'Error...',\n              message: 'Sending cart data failed!',\n            })\n          );   \n    }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}